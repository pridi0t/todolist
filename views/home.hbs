<div role="alert" class="alert alert-success" style="display:none">
    <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
    <p id="alertSuccess"></p>
    <button class="btn btn-sm" onclick="pageReload()">확인</button>
</div>
<div role="alert" class="alert alert-error" style="display:none">
  <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
  <p id="alertError"></p>
  <button class="btn btn-sm" onclick="pageReload()">확인</button>
</div>
<div class="artboard phone-2 mx-auto space-y-3">
    <div class="space-y-4 my-8">
        <h2 class="text-3xl font-bold text-center my-4">TODOLIST</h2>
        <h3 class="text-base font-bold text-center">{{today}}</h3>
        <progress class="progress" value="{{progress}}" max="100"></progress>
        <div class="flex space-x-1">
            <select id="todoPriority" class="select select-neutral select-sm">
                <option value="0">높음</option>
                <option value="1">보통</option>
                <option value="2">낮음</option>
            </select>
            <input type="text" id="todo" class="input input-bordered input-neutral input-sm flex-auto" placeholder="할 일 입력" >
            <button type="button" class="btn btn-neutral btn-sm" onclick="addList()">추가</button>
        </div>
    </div>
    <ul class="space-y-2">
        {{#each list}}
        <li class="flex space-x-1">
            <button type="button" class="btn {{convertPriorityColor todoPriority}} btn-sm" onclick="updatePriority('{{_id}}', '{{todoPriority}}')">{{convertPriority todoPriority}}</button>
            <input type="text" value="{{todo}}" class="input input-bordered input-sm flex-auto" onchange="updateTodo('{{_id}}', '{{todo}}', this)" {{#if checked}}disabled{{/if}}>
            <input type="checkbox" class="checkbox checkbox-neutral checkbox-lg self-center" onclick="updateChecked('{{_id}}', this)" {{#if checked}}checked="true"{{/if}}>
            <button type="button" class="btn btn-error btn-sm btn-square" onclick="deleteList('{{_id}}')">X</button>
        </li>
        {{/each}}
    </ul>
</div>

<script>
    /* 커스텀알림창 */
    function pageReload() {
        document.location.reload();
    }

    function customAlert(type, message) {
        let element;
        if (type === "success") {
            element = document.getElementById('alertSuccess');
        } else {
            element = document.getElementById('alertError');
        }
        element.innerText = `${message} (확인을 누르면 상태가 변경됩니다)`;
        element.parentNode.removeAttribute("style");
    }

    /* 할 일 추가 */
    const postOption = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    }

    async function addList() {
        const todo = document.getElementById('todo').value;
        const todoPriority = +(document.getElementById('todoPriority').value);

        if (!todo) {
            customAlert("error", "할 일을 입력해주세요");
            return;
        }

        await fetch("/list", {
            ...postOption,
            body: JSON.stringify({ todo, todoPriority })
        })
            .then((res) => {
                if (!res.ok) {
                    customAlert("error", "할 일을 추가하지 못했습니다");
                } else {
                    customAlert("success", "할 일이 추가되었습니다");
                }
            });
    }

    /* 할 일 수정 */
    const updateOption = {
        method: 'PATCH',
        headers: {
            'Content-Type': 'application/json'
        }
    }

    async function updateTodo(id, before, after) {
        if (!after.value) {
            after.value = before;
            return ;
        }

        await fetch("/list", {
            ...updateOption,
            body: JSON.stringify({ id, todo: after.value })
        })
            .then((res) => {
                if (!res.ok) {
                    customAlert("error", "할 일을 수정하지 못했습니다");
                } else {
                    document.location.reload();
                }
            });
    }

    async function updatePriority(id, priority) {
        const afterPriority = (priority + 2) % 3;

        await fetch("/list", {
            ...updateOption,
            body: JSON.stringify({ id, todoPriority: afterPriority })
        })
            .then((res) => {
                if (!res.ok) {
                    customAlert("error", "할 일의 우선순위를 변경하지 못했습니다");
                } else {
                    document.location.reload();
                }
            });
    }

    async function updateChecked(id, checkbox) {
        await fetch("/list", {
            ...updateOption,
            body: JSON.stringify({ id, checked: checkbox.checked })
        })
            .then((res) => {
                if (!res.ok) {
                    customAlert("error", "할 일의 상태를 변경하지 못했습니다");
                } else {
                    document.location.reload();
                }
            });
    }

    /* 할 일 삭제 */
    const deleteOption = {
        method: 'DELETE',
        headers: {
            'Content-Type': 'application/json'
        }
    }

    async function deleteList(id) {
        await fetch("/list", {
            ...deleteOption,
            body: JSON.stringify({ id })
        })
            .then((res) => {
                if (!res.ok) {
                    customAlert("error", "할 일을 삭제하지 못했습니다");
                } else {
                    customAlert("success", "할 일이 삭제되었습니다");
                }
            });
    }
</script>